<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<statusEffect>
	<!-- GENERAL INFORMATION: If you are unsure of anything, please use the LT Discord to ask for help!-->
	
	<!-- An integer used for determining the order of rendering status effect icons. A higher value means that it's higher up in the rendering priority (and so will be rendered before others).
	Typical values go from 0 to 100.
	A good default value is to set it as 50. As this status effect is a set bonus, it has a higher rendering priority than usual (of 70).
	For some examples of the rendering priority:
	- A character's racial perk effect has a priority of 1000, as I want it to always be rendered first no matter what.
	- Weather effects have a priority of 100 (as I want them to always be displayed as high as possible).
	- Sexual orientation has a priority of 90 (as I want it to be displayed near the start).
	- Most other standard status effects (such as pregnancy, well-rested, alcohol level, etc.) have a priority of 80.
	- Set bonuses have a priority of 70. -->
	<renderingPriority>70</renderingPriority>
	
	<!-- 'true' if you want this status effect to be displayed in the affected character's status effect panel. This should pretty much always be 'true'. -->
	<renderInEffectsPanel>true</renderInEffectsPanel>
	
	<!-- 'BENEFICIAL' if this is a good status effect for a character to have, 'NEUTRAL' if it's neither, or 'DETRIMENTAL' if it's a bad one. -->
	<beneficial>NEUTRAL</beneficial>
	
	<!-- 'true' if you want this status effect to be rendered during combat, and if the 'applyEffects' element should be applied to the affected character on every combat round during which it is active.
	This should only be set to true if this a status effect which is applied and used *only* in combat.
	Status effects which are marked as combat status effects are not ever applied outside of combat. -->
	<combatEffect>false</combatEffect>
	
	<!-- 'true' if you want this status effect to be rendered during sex. -->
	<sexEffect>true</sexEffect>
	
	<!-- The name of this set bonus. The character under the effect is passed in as the 'npc' parsing argument, so if you want to, you can include parsing elements such as [npc.name]. -->
	<name><![CDATA[Enchanted Anklet]]></name>
	
	<!-- The description of this status effect. The character under the effect is passed in as the 'npc' parsing argument, so if you want to, you can include parsing elements such as [npc.name]. -->
	<description>
	<![CDATA[
	[npc1.Her] [npc1.are] wearing an anklet bearing a [style.BtfGrow(powerful transformative enchantment,)] growing [npc1.her] partner's penis/clitoris large enough to fill them up all the way...
	]]>
	</description>
	
	<!-- The name of the icon which should be used to represent this status effect. The icon must be an svg file, and must be placed in the same folder as this XML file. -->
	<imageName zLayer="0" imageRotation="0" imageSize="80">anklet.svg</imageName>
	
	<!-- The colour which should be associated with this status effect. Just like with clothing and weapon recolouring, this is used to recolour the image you used above.
	A PresetColour value should be used here, drawn from: https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/utils/colours/PresetColour.java -->
	<colourPrimary>COVERING_STEEL</colourPrimary>
	<!-- This has to have a value defined, or else this XML file will fail to load. -->
	<secondaryColours>BASE_CRIMSON</secondaryColours > <!-- This can optionally be left blank, like the 'colourTertiary' element below. -->
	<colourTertiary>BASE_CRIMSON</colourTertiary>
	
	<!-- The attributes which should be affected by having this status effect. The value="10" part defines how much the attribute should be numerically affected (and can be negative), while the 'DAMAGE_LUST' part defines which attribute is being affected.
	You can define any number of attribute modifiers, but it's usually best to keep it limited to just a few.
	Values for attributes should be drawn from here: https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/game/character/attributes/Attribute.java-->

	<attributeModifiers/>
	
	<!-- The CombatMoves which should be unlocked for the character affected by this status effect.
	CombatMove identifiers are defined in their constructors. When modding support for combat moves is added, the identifier will be described in the modding file there.
	Current CombatMoves can be found in the files in this folder: https://github.com/Innoxia/liliths-throne-public/tree/dev/src/com/lilithsthrone/game/combat/moves
	For this status effect, no combat moves need to be added, but if you need to use this section, use the following format:
	<combatMoves>
		<move>cat-scratch</move>
	</combatMoves> -->
	<combatMoves/>
	
	<!-- The Spells which should be unlocked for the character affected by this status effect.
	Current Spells can be found in the files in this folder: https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/game/combat/spells/Spell.java
	For this status effect, no spells need to be added, but if you need to use this section, use the following format:
	<spells>
		<spell>ARCANE_AROUSAL</spell>
	</spells> -->
	<spells/>
	
	<!-- You can use this section to describe any extra effects that this status effect might apply. These effects are shown in the tooltip when the player hovers over the status effect icon.
	The character under the effect is passed in as the 'npc' parsing argument, so if you want to, you can include parsing elements such as [npc.name].
	For this status effect, no extra effects need to be described, but if you need to use this section, use the following format:
	<extraEffects>
		<effect><![CDATA[You're a playful kitty!]]></effect>
	</extraEffects> -->
	<extraEffects>
	<effect><![CDATA[[style.bArcane(Orgasms transform active partners, and possibly subject!)]]]></effect>
	</extraEffects>
	
	
	<!-- Effect logic -->
	
	<!-- The condition for a status effect to be applied is by default 'false', which means that it can only be applied by a direct method call elsewhere for GameCharacter.addStatusEffect(AbstractStatusEffect statusEffect, int seconds)
	If you would like your status effect to similarly only be applied when called upon, then define this element as:
	<applicationCondition><![CDATA[false]]></applicationCondition>
	If, however, you would like this status effect to be automatically activated once certain conditions are met, then make sure that this element returns a conditional that would result in 'true' (without quotes), as in the example below.
	You must use the game's parsing engine to get what you want.
	'npc' is the parser target for the character affected by this status effect.
	To parse something and return a String, use a '#' character at the start of a command, such as: [#npc.isFeminine()]
	To parse something without returning a String (which would most likely not be used in this element), use two '#' characters, such as: [##npc.isFeminine()]
	As a final note, all whitespace is stripped from the returned String before it is parsed into a Boolean. -->
	<applicationCondition><![CDATA[
		#IF(npc.getClothingInSlot(IS_ANKLE)!=null)
			#IF((npc.getClothingInSlot(IS_ANKLE).getClothingType()==CT_condarbi_sizequeen_anklet))
				true	
			#ELSE
				false
			#ENDIF
		#ELSE
			false
		#ENDIF
	]]></applicationCondition>
	<!--The above example is meant to show that you can use the parser to create more "complex" conditionals, but an alternate, simpler example to achieve the same effect would be to just do:
	<applicationCondition><![CDATA[
		SET_BONUS_innoxia_kitty.isCharacterWearingCompleteSet(npc)
	]]></applicationCondition>
	-->
	
	
	<!-- Status effects execute an 'applyEffect(GameCharacter target, int secondsPassed)' method every time the game ends a turn.
	The 'target' is the character who is under the effect of this particular status effect, while the 'secondsPassed' is how much time, in seconds, has passed on this turn.
	During combat, the 'secondsPassed' argument is always 1 (to represent 1 turn ending).
	If the method returns a String, then the game's flow is interrupted to display the 'Important status effects' screen to the player, along with whatever String was returned by this applyEffect() method.
	You can define your own effects to be parsed here, just like hard-coded status effects. While your options are a little limited by what the parser can access, you should be able to apply a good range of effects.
	The 'interval' attribute is an integer representing how often this effect should be applied (measured in seconds).
		For example, an interval of 3600 would make this effect be applied only once per hour (60*60=3600).
		Use an interval of 0 to make this effect be applied on every turn.
	'npc' is the parser target for the character affected by this status effect.
	SECONDS_PASSED is a special tag which is converted into an integer value of the time that passed during the last turn's end (in seconds).
	TOTAL_SECONDS_PASSED is a special tag which is converted into a long value of the total time that's passed while under the effect of this status effect (in seconds).
		This can be used with a TOTAL_SECONDS_PASSED==0 check to apply an effect when this status effect is initially added.
	Important note: In combat, 'seconds passed' is actually represented by the number of combat turns passed.
		So, for example, TOTAL_SECONDS_PASSED would be converted into 2 if the character had been under the status effect's influence for two turns in combat.
	As a final note, all tabs are stripped from the returned String after it is parsed, so it's safe to use tabs *not spaces* for formatting.
	This particular status effect does not apply an effect, but if you wanted to apply one, you could do something like this:
	
	
	
	you can use getStickers() on "AbstractClothing" class, what does getClothingInSlot return?
	-->

	<applyEffect interval="0"><![CDATA[
		[##var tattooChar = npc]
		[##var modeTFSelf]
		[##var modeTFPartner]
		[##var debug = false]
		[##function findTFModeStickerSelf(x, y){
			if(debug){game.appendToTextEndStringBuilder(npc, "<p> self mode is "+x+" & "+y+"</p>")}
			if(x == "selftf"){
				if(y == "off" || y == "on"){
					modeTFSelf = y;
				}
			}
		}]
		[##function findTFModeStickerPartner(x, y){
			if(debug){game.appendToTextEndStringBuilder(npc, "<p> partner mode is "+x+" & "+y+"</p>")}
			if(x == "partnertf"){
				if(y == "none" || y == "penis" || y == "clit" || y == "both"){
					modeTFPartner = y;
				}
			}
		}]
		
		[##function doesPenisPenetration(subject1){
			if(subject1.hasPenisIgnoreDildo() && !subject1.getBaseFetishDesire(FETISH_PENIS_GIVING).isNegative()){
				return true;
			} else {
				return false;
			}
		}]
		[##function doesClitPenetration(subject2){
			if(subject2.hasVagina() && subject2.isClitorisPseudoPenis()){
				return true;
			} else {
				return false;
			}
		}]
		[##function canTakeTooDeep(subject3){
			if(subject3.hasBaseFetish(FETISH_SIZE_QUEEN) || subject3.hasBaseFetish(FETISH_MASOCHIST)){
				return true;
			} else {
				return false;
			}
		}]
		[##function getMaxDepth(subject4, hole){
			if((hole == "ass" || hole == "anus") && canTakeTooDeep(subject4)){
				return subject4.getAssMaximumPenetrationDepthUncomfortable();
			} else if((hole == "ass" || hole == "anus") && !canTakeTooDeep(subject4)){
				return subject4.getAssMaximumPenetrationDepthComfortable();
			} else if((hole == "vag") && canTakeTooDeep(subject4)){
				return subject4.getVaginaMaximumPenetrationDepthUncomfortable();
			} else if((hole == "vag") && !canTakeTooDeep(subject4)){
				return subject4.getVaginaMaximumPenetrationDepthComfortable();
			} else if((hole == "mouth") && canTakeTooDeep(subject4)){
				return subject4.getFaceMaximumPenetrationDepthUncomfortable();
			} else if((hole == "mouth") && !canTakeTooDeep(subject4)){
				return subject4.getFaceMaximumPenetrationDepthComfortable();
			}
		}]
		
		#IF(tattooChar == sex.getCharacterOrgasming() && sex.isReadyToOrgasm(tattooChar))
			[##function sizeQueenAnklet(femChar) {
				
				tattooChar.getClothingInSlot(IS_ANKLE).getStickers().forEach(findTFModeStickerSelf);
				tattooChar.getClothingInSlot(IS_ANKLE).getStickers().forEach(findTFModeStickerPartner);
				if(debug){game.appendToTextEndStringBuilder(npc, "<p> modes are "+modeTFSelf+" & "+modeTFPartner+"</p>")}
				if(debug){game.appendToTextEndStringBuilder(npc, "<p> partner will do penis? "+doesPenisPenetration(femChar)+"</p>")}
				if(debug){game.appendToTextEndStringBuilder(npc, "<p> partner will do clit? "+doesClitPenetration(femChar)+"</p>")}
				
				if(modeTFSelf == "on"){
					if(!tattooChar.hasBaseFetish(FETISH_SIZE_QUEEN) && tattooChar.getBaseFetishDesire(FETISH_SIZE_QUEEN) != "FOUR_LOVE"){
						if(debug){game.appendToTextEndStringBuilder(npc, "<p> sizequeen 1</p>")}
						game.appendToTextEndStringBuilder(tattooChar, tattooChar.setFetishDesire(FETISH_SIZE_QUEEN, tattooChar.getBaseFetishDesire(FETISH_SIZE_QUEEN).getNextDesire().getNextDesire().getNextDesire().getNextDesire()));
						game.appendToTextEndStringBuilder(tattooChar, tattooChar.addFetish(FETISH_SIZE_QUEEN));
						if(debug){game.appendToTextEndStringBuilder(npc, "<p> sizequeen 2</p>")}
					}
					if(tattooChar.hasBaseFetish(FETISH_SIZE_QUEEN) && tattooChar.getBaseFetishDesire(FETISH_SIZE_QUEEN) != "FOUR_LOVE"){
						if(debug){game.appendToTextEndStringBuilder(npc, "<p> sizequeen 3</p>")}
						tattooChar.removeFetish(FETISH_SIZE_QUEEN);
						game.appendToTextEndStringBuilder(tattooChar, tattooChar.setFetishDesire(FETISH_SIZE_QUEEN, tattooChar.getBaseFetishDesire(FETISH_SIZE_QUEEN).getNextDesire().getNextDesire().getNextDesire().getNextDesire()));
						tattooChar.addFetish(FETISH_SIZE_QUEEN);
						if(debug){game.appendToTextEndStringBuilder(npc, "<p> sizequeen 4</p>")}
					}
				
					
					if(tattooChar.getBaseFetishDesire(FETISH_ANAL_RECEIVING) != "ZERO_HATE"){
						if(tattooChar.getAssWetness().getValue() < 7){
							game.appendToTextEndStringBuilder(tattooChar, tattooChar.incrementAssWetness(1));
						}
						if(tattooChar.getAssPlasticity().getValue() > 0){
							game.appendToTextEndStringBuilder(tattooChar, tattooChar.incrementAssPlasticity(-1));
						}
						if(tattooChar.getAssElasticity().getValue() < 7){
							game.appendToTextEndStringBuilder(tattooChar, tattooChar.incrementAssElasticity(1));
						} else {
							
							if(doesPenisPenetration(femChar)){
								if(tattooChar.getAssMaximumPenetrationDepthUncomfortable() < femChar.getPenisRawSizeValue()){
									game.appendToTextEndStringBuilder(tattooChar, tattooChar.incrementAssDepth(1));
								}
							}
							if(doesClitPenetration(femChar)){
								if(tattooChar.getAssMaximumPenetrationDepthUncomfortable() < femChar.getVaginaRawClitorisSizeValue()){
									game.appendToTextEndStringBuilder(tattooChar, tattooChar.incrementAssDepth(1));
								}
							}
						}
					}
					
					if(tattooChar.getBaseFetishDesire(FETISH_VAGINAL_RECEIVING) != "ZERO_HATE" && tattooChar.hasVagina()){
						if(tattooChar.getVaginaWetness().getValue() < 5){
							game.appendToTextEndStringBuilder(tattooChar, tattooChar.incrementVaginaWetness(1));
						}
						if(tattooChar.getVaginaPlasticity().getValue() > 0){
							game.appendToTextEndStringBuilder(tattooChar, tattooChar.incrementVaginaPlasticity(-1));
						}
						if(tattooChar.getVaginaElasticity().getValue() < 7){
							game.appendToTextEndStringBuilder(tattooChar, tattooChar.incrementVaginaElasticity(1));
						} else {
							
							if(doesPenisPenetration(femChar)){
								if(tattooChar.getVaginaMaximumPenetrationDepthUncomfortable() < femChar.getPenisRawSizeValue()){
									game.appendToTextEndStringBuilder(tattooChar, tattooChar.incrementVaginaDepth(1));
								}
							}
							if(doesClitPenetration(femChar)){
								if(tattooChar.getVaginaMaximumPenetrationDepthUncomfortable() < femChar.getVaginaRawClitorisSizeValue()){
									game.appendToTextEndStringBuilder(tattooChar, tattooChar.incrementVaginaDepth(1));
								}
							}
						}
					}
					
					if(tattooChar.getBaseFetishDesire(FETISH_ORAL_GIVING) != "ZERO_HATE"){
						if(tattooChar.getFaceWetness().getValue() < 5){
							game.appendToTextEndStringBuilder(tattooChar, tattooChar.incrementFaceWetness(1));
						}
						if(tattooChar.getFacePlasticity().getValue() > 0){
							game.appendToTextEndStringBuilder(tattooChar, tattooChar.incrementFacePlasticity(-1));
						}
						if(tattooChar.getFaceElasticity().getValue() < 7){
							game.appendToTextEndStringBuilder(tattooChar, tattooChar.incrementFaceElasticity(1));
						} else {
							
							if(doesPenisPenetration(femChar)){
								if(tattooChar.getFaceMaximumPenetrationDepthUncomfortable() < femChar.getPenisRawSizeValue()){
									game.appendToTextEndStringBuilder(tattooChar, tattooChar.incrementFaceDepth(1));
								}
							}
							if(doesClitPenetration(femChar)){
								if(tattooChar.getFaceMaximumPenetrationDepthUncomfortable() < femChar.getVaginaRawClitorisSizeValue()){
									game.appendToTextEndStringBuilder(tattooChar, tattooChar.incrementFaceDepth(1));
								}
							}
						}
					}
				}
				
				
				
				if(modeTFPartner == "both"){
					if(debug){game.appendToTextEndStringBuilder(npc, "<p> has vagina? "+femChar.hasVagina()+"</p>")}
					if(debug){game.appendToTextEndStringBuilder(npc, "<p> has penetrating clit? "+femChar.isClitorisPseudoPenis()+"</p>")}
					if(debug){game.appendToTextEndStringBuilder(npc, "<p> has dick? "+femChar.hasPenisIgnoreDildo()+"</p>")}
					if(debug){game.appendToTextEndStringBuilder(npc, "<p> has hates dick? "+femChar.getBaseFetishDesire(FETISH_PENIS_GIVING).isNegative()+"</p>")}
					if(femChar.hasVagina() && !femChar.isClitorisPseudoPenis()){
						game.appendToTextEndStringBuilder(femChar, femChar.incrementVaginaClitorisSize(1))
					}
					if(!femChar.hasPenisIgnoreDildo() && femChar.getBaseFetishDesire(FETISH_PENIS_GIVING).getValue() > 1){
						game.appendToTextEndStringBuilder(femChar, femChar.setPenisType(femChar.getRace().getRacialBody().getPenisType()));
					}
				}
				if(modeTFPartner == "penis"){
					if(debug){game.appendToTextEndStringBuilder(npc, "<p> has dick? "+femChar.hasPenisIgnoreDildo()+"</p>")}
					if(debug){game.appendToTextEndStringBuilder(npc, "<p> has hates dick? "+femChar.getBaseFetishDesire(FETISH_PENIS_GIVING).isNegative()+"</p>")}
					if(!femChar.hasPenisIgnoreDildo() && !femChar.getBaseFetishDesire(FETISH_PENIS_GIVING).isNegative()){
						game.appendToTextEndStringBuilder(femChar, femChar.setPenisType(femChar.getRace().getRacialBody().getPenisType()));
					}
				}
				if(modeTFPartner == "clit"){
					if(debug){game.appendToTextEndStringBuilder(npc, "<p> has vagina? "+femChar.hasVagina()+"</p>")}
					if(debug){game.appendToTextEndStringBuilder(npc, "<p> has penetrating clit? "+femChar.isClitorisPseudoPenis()+"</p>")}
					if(femChar.hasVagina() && !femChar.isClitorisPseudoPenis()){
						game.appendToTextEndStringBuilder(femChar, femChar.incrementVaginaClitorisSize(1))
					}
				}
				
				
				if(doesPenisPenetration(femChar)){
					if(tattooChar.getBaseFetishDesire(FETISH_ANAL_RECEIVING) != "ZERO_HATE"){
						if(debug){game.appendToTextEndStringBuilder(npc, "<p> penis ass active 1 </p>")}
						if(getMaxDepth(tattooChar, "ass") > femChar.getPenisRawSizeValue() && femChar.getPenisRawSizeValue() < 100){
							if(debug){game.appendToTextEndStringBuilder(npc, "<p> penis ass active 2 </p>")}
							game.appendToTextEndStringBuilder(femChar, femChar.incrementPenisSize(1));
						}
					}
					if(tattooChar.getBaseFetishDesire(FETISH_VAGINAL_RECEIVING) != "ZERO_HATE" && tattooChar.hasVagina()){
						if(debug){game.appendToTextEndStringBuilder(npc, "<p> penis vag active 1 </p>")}
						if(getMaxDepth(tattooChar, "vag") > femChar.getPenisRawSizeValue() && femChar.getPenisRawSizeValue() < 100){
							if(debug){game.appendToTextEndStringBuilder(npc, "<p> penis vag active 2 </p>")}
							game.appendToTextEndStringBuilder(femChar, femChar.incrementPenisSize(1));
						}
					}
					if(tattooChar.getBaseFetishDesire(FETISH_ORAL_GIVING) != "ZERO_HATE"){
						if(debug){game.appendToTextEndStringBuilder(npc, "<p> penis mouth active 1 </p>")}
						if(getMaxDepth(tattooChar, "mouth") > femChar.getPenisRawSizeValue() && femChar.getPenisRawSizeValue() < 100){
							if(debug){game.appendToTextEndStringBuilder(npc, "<p> penis mouth active 2 </p>")}
							game.appendToTextEndStringBuilder(femChar, femChar.incrementPenisSize(1));
						}
					}
				}
				if(doesClitPenetration(femChar)){
					if(tattooChar.getBaseFetishDesire(FETISH_ANAL_RECEIVING) != "ZERO_HATE"){
						if(getMaxDepth(tattooChar, "ass") > femChar.getVaginaRawClitorisSizeValue() && femChar.getVaginaRawClitorisSizeValue() < 100){
							game.appendToTextEndStringBuilder(femChar, femChar.incrementVaginaClitorisSize(1));
						}
					}
					if(tattooChar.getBaseFetishDesire(FETISH_VAGINAL_RECEIVING) != "ZERO_HATE" && tattooChar.hasVagina()){
						if(getMaxDepth(tattooChar, "vag") > femChar.getVaginaRawClitorisSizeValue() && femChar.getVaginaRawClitorisSizeValue() < 100){
							game.appendToTextEndStringBuilder(femChar, femChar.incrementVaginaClitorisSize(1));
						}
					}
					if(tattooChar.getBaseFetishDesire(FETISH_ORAL_GIVING) != "ZERO_HATE"){
						if(getMaxDepth(tattooChar, "mouth") > femChar.getVaginaRawClitorisSizeValue() && femChar.getVaginaRawClitorisSizeValue() < 100){
							game.appendToTextEndStringBuilder(femChar, femChar.incrementVaginaClitorisSize(1));
						}
					}
				}
			}]
			
			[##function getOtherCharsAnklet(characterMap) {characterMap.remove(tattooChar); characterMap.keySet().forEach(sizeQueenAnklet);}]
			[##sex.getOngoingActionsMap(tattooChar).values().stream().forEach(getOtherCharsAnklet)]
		#ENDIF
	]]></applyEffect>

	
	<!-- In a similar manner to the 'applyEffect' element above, the game processes logic when a status effect is removed.
	It does not require an 'interval' attribute.
	(This logic is performed while the character is still under the effects of this status effect.) -->
	<applyRemovalEffect/>

	
	<!-- In a similar manner to the 'applyEffect' element above, the game processes logic after a status effect has been removed.
	It does not require an 'interval' attribute.
	(This logic is performed immediately after the effect is removed, so the character is no longer under the effects of this status effect.) -->
	<applyPostRemovalEffect/>
	
</statusEffect>
